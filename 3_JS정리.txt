JAVA 와 JAVAScript 다르다.
자바스크립트로 할수 있는것들
	1. 웹 클라이언트( 서비스제공받는 ) [ HTML,CSS,JS ] 
	------------ 2009년 이후 node.js --------------
	2. 웹 서버( 서비스제공하는 ) [ node.js ] VS JAVA(spring)
	3. 모바일  [ react native ]
	4. 데스크톱 애플리케이션[ NW.js ] vs JAVA(spring)
	5. 데이터베이스 관리[ NOSQL ] vs SQL

- 텍스트 에디터
	프론트엔드 	: VScode , 아톰 등등 
	백엔드 		: 이클립스 , 인텔리제이 등등 

- 브라우저 [ 클라이언트 입장 ]
	크롬 , 엣지 , 사파리 등등

- 기본용어 
    부호           : ( 모스부호[짧은신호 또는 긴신호] -> 전기상태[ 있다 또는 없다 ] -> 2진수[ 0 또는 1 ]  )

    코드           : 정보를 다른 형태로 변환하는 규칙[ 문법 / 도구 ]
                    [ java[규칙] , html[규칙 <> ] , css[ 규칙 식별자{} ] , js , python , C# ]

    표현식         : 하나 이상의 값/정보 으로 표현될 수 있는 코드를 의미
    문장           : 표현식 한개이상 모인것(명령문)
    프로그램       : 문장이 모인것(명령문의 집합)
    프로세스       : 현재 실행중인 프로그램( 스케줄링/스레드 )
    응용프로그램    : 사용자가 사용할수 있도록 만든 프로그램 ( = 애플리케이션 )
    웹 애플리케이션 : 웹에서 사용하는 프로그램 


                                                         >   웹 애플리케이션(프로세스)
    부호 > 코드 > 표현식 > 문장 > 프로그램     사용처 따라  >   앱 애플리케이션(프로세스)        
                                                         >   데스크탑 애플리케이션(프로세스)


    개발자/사람                                     컴퓨터 
    <div>           ----------명령어------------> [번역] 010101010101010

    박스모델            <----------- 실행결과--------- 


    console.log("안녕") ---------명령어-----------> [번역] 010101011011111

    안녕                <----------- 실행결과--------- 

- 키워드 : 언어들이 미리 만든 (기능이 들어간)단어들.
    !! : 키워드와 동일하게 이름을 정의하지 말자!! [ 중복되니까. ]

- 식별자 : 어떤한 변수/함수/명령 등을 식별하기 위한 이름
    HTML/CSS : id , class , <마크업> 
    JS : 변수/함수/클래스 등등
    1. 키워드사용불가  2. 숫자시작불가 3. 특수문자는 _ , $ 만 가능 4. 공백불가능
    2. 영어권장(카멜표기법) , 의미있는 이름 

- 주석 : 코드 설명 
    HTML : <!-- 주석 -->
    CSS : /* 주석 */
    JS  :   
            1. 한줄주석 : // 한줄주석  
            2. 여러줄주석 : /* 여러줄 주석 */

- HTML에서 JAVAScript 적용하는 방법
    HTML( 뼈대 ) , CSS( 스타일 ) , JS( 행위 )
    1. <script> 마크업을 이용한 스크립트 작성 
    2. <head> 또는 <body>가장하단에 <script src=".js파일경로"> 마크업에 .js파일을 불러오기

1. 입출력 방법 [ *2/6 ]
    1. alert("출력하고싶은말")                              : 경고창(확인버튼) 출력 함수
    2. console.log("출력하고싶은말")                        : console(f12개발자도구) 출력 함수
    3. confirm("출력하고싶은말")                            : 확인창(확인=true/취소=false) 버튼 출력 함수
    4. prompt("출력하고싶은말")                             : 입력상자(input , 확인=true/취소=false) 입력 함수 
    5. document.write("HTML에출력하는싶은말")               : HTML에 출력 함수 
    6. document.특정식별자.innerHTML = "HTML에출력하는싶은말";    : 특정 요소/마크업 에 출력 함수 

2. 기본 자료형 
    - 자료 : 프로그램이 처리할수 있는 모든 것 
    - 자료형 : 자료 형태/모양/폼 나눠 놓은 것  [ 왜? 메모리 효율적으로 쓰자.!!! ]
        1.숫자(number) 2.문자열(string) 3.불(boolean) 4.undefiend

            [숫자]
            1.숫자와 문자열 구분 
                273 vs "273"  다르다.

            [불]
            1. true 혹은 false

            [문자열]
            1.문자열 표현방법 : '문자열' 또는 "문자열" 또는 ` `
                주의점할점 :1. '문자열"  불가능
                            2. " ' ' " 가능 
                            3. ' " " ' 가능

            2. 이스케이프/제어 문자  
                -  엔터 위에 원화기호 \ 백슬래시 ( / 슬래시와 다름 ) 
                1. \n : 줄바꿈
                2. \t : 탭기능(들여쓰기)
                3. \\ : 백슬래쉬 출력 
                그외 \" , \'  연산자 출력시 

            3. 문자열 연산자
                문자열+문자열       : 문자열 연결 연산자 : "문자열"+"문자열" 
                문자열[인덱스번호]   : 문자열에서 인덱스 번째 문자 추출
                                    - 인덱스 : 저장된 순서번호 = 인덱스 0번* 시작
                                    '안 녕 하 세 요'
                                    [0][1][2][3][4]
                                    '안녕하세요'[0]     : 해당 문자열내 0번째 문자 => 안

                문자열.length       : 문자열내 문자 개수
                        '안녕하세요'.length : 해당 문자열내 문자 개수 => 5

3. 연산자[ 연산/계산/논리 시 사용되는 특수문자 ]
    1. 산술 연산자 : 결과 값[숫자형] 반환
        + 더하기 -빼기  *곱하기  /나누기  %나머지
        몫 구하기 
        parseInt( 실수 ) : 정수로 변환해주는 함수 

    2. 연결 연산자 : + 연결연산자 [ 문자열 ] 
        숫자+숫자 [ 더하기 ]
        숫자+'문자열' [ 연결 ]
        '문자열'+'문자열' [ 연결 ]
        '문자열' + 변수 [ 연결 ]

    3. 비교연산자 : 비교 후 true/참 혹은 false/거짓 반환  
        >초과/크다          <미만/작다
        >=이상/크거나같다    <=이하/작거나같다
        ==같다[데이터비교]   ===같다[데이터/자료형 강력비교]
        !=같지않다          !==같지않다

    4. 관계연산자 : 주로 비교연산자를 2개이상일때 사용 후 true/참 혹은 false/거짓 반환  
        && 이면서 면서 이고 모두 그리고 and조건         초등학생이 사탕이면서 초콜릿 먹는다. [ 모두 참이면 참 ]   
                                                            초등학생 == 사탕  && 초등학생 == 초클릿 
        || 이거나 거나 또는 하나라도 or조건             초등학생이 사탕이거나 초콜릿 먹는다. [ 하나라도 참이면 참 ]
                                                            초등학생 == 사탕  || 초등학생 == 초클릿 
        !   반대 부정 not조건                          초등학생이 사탕빼고 먹는다.          [ 참t -> 거짓f  / 거짓f -> 참t ]
                                                            !초등학생 == 사탕 
        - | 특수문자 : 쉬프트+\(엔터위에 백슬래시)

    5. 증감연산자 : 1증가 혹은 1감소 
        ++ 1증가    [ ++변수 : 선위증가 , 변수++ : 후위증가 ]
        -- 1감소    [ --변수 : 선위감소 , 변수-- : 후위감소 ]

    6. 대입연산자 : 오른쪽 데이터를 왼쪽에 넣어주기/대입/저장
        = 대입  [ 변수 = 10;    10이라는 데이터를 변수에 넣어주기/대입/저장 ]
        +=  오른쪽 데이터를 왼쪽값과 더한후에 왼쪽에 대입
        -= , *= , /= , %= 등등

        * 예) 특정 변수에 1더하기 
            let value = 1;
                1. value = value + 1
                2. value += 1 
                3. value++;   
                4. ++value 
               
    7. 삼항연산자 : 조건 ? 참 : 거짓 
            - 조건  : 비교/관계 연산자                  true 또는 false 
            - 참    : true 대신 하고 싶은 실행코드      
            - 거짓  : false 대신 하고 싶은 실행코드     
            
- 연산 관련 함수들 
    1. parseInt()   : 정수로 변환* 
    2. typeof()     : 자료형 검사* 
    3. Number()     : 숫자자료형으로 변환 함수 
    4. String()     : 문자자료형으로 변환 함수 
    5. Boolean()    : 불 자료형으로 변환 함수 

- ***** 템플릿 문자열 ***** 
    `백틱을 이용한 문자열과 데이터 표현 
    1. 전체를 `백틱으로 감싼다.
    2. 데이터를 표현할 위치에 ${ 데이터 }

- 상수 와 변수 
    메모리 : 주기억장치[ 현재실행중메모리 = RAM = 휘발성 ] , 보조기억장치[ 영구저장용메모리 = SSD , USB , CD 등등 = 비휘발성 ]
        - 컴퓨터가 데이터를 저장하는 공간

    JS , JAVA, PYTHON , C 언어 등 프로그래밍 코드 언어들은 개발자를 위해서 하드웨어(RAM)에 값[자료]을 저장할수 있도록 만들어진 문법
        - html , css 없음 

    * 왜?? 저장할려고 왜? 기억할려고 왜? 반복사용 

        상수/변수 : 1개의 자료[ 숫자,문자열,불 ] 를 저장/가지고 있는 상자

    변수명 VALUE1 
    |           |                               RAM[ 주기억장치 ]
    |   "안녕"  |       '안녕' 저장해
    |           |  ---------------------->   "안녕" ------> 유니코드 010101010101111
    |___________|

    상수 : 항상 같은 수 
        - 한번 값을 넣으면 수정 할수 없습니다.
        - const : 상수 선언하는 의미 담고있는 키워드 

    변수 : 변할 수 있는 수 
        - 값을 계속 변경 할수 있습니다.
        - var 또는 let : 변수 선언하는 의미 담고 있는 키워드 

    -변수/상수 만들기
        1. 키워드 : const , let 
        2. 식별이름 : 변수/상수명 정하기 [ 중복없이 ]
        3. = : 대입 
        4. 초기값 

    -변수/상수 값 호출
        - 변수명 또는 상수명 작성하면 변수 또는 상수내 값 반환 
        변수/상수 명
   
    -변수/상수 값 변경  [ - 상수 제외 ]
        변수명 = 새로운 값 

    -변수/상수 값 연산 
        변수/상수명 + 10
 
------------ 간단한 컴퓨터 하드웨어 소개 ------------------- 
 10000 [ C드라이브 : 실행 하고 끝 ]
 let a = 10000 [ c드라이브 : 실행 하고 끝  + 프로그램 종료될때까지 저장. ]

                                        
                                        -컴퓨터 본체 

                                        --주 기억장치  8 G [ RAM ]
                                            |    
                                            |    필요한 데이터[ 현재 선택한 캐릭터 ] 주기억장치로 이동
    1.게임설치/다운로드                       |
        롤                              --보조 기억장치 500G 1T [ SSD  , C , USB , 비휘발성 : 본인 직접 삭제하지 않는 이상 영구저장 ]
                
                    ------1------>                  50GB
                     코드 다운로드

    2.게임실행[ 로그인 / 캐릭터선택 -> 게임중 ]


   

- 제어문(조건문) 
        - 주어진 조건의 만족 여부에 따라 선택적으로 실행하고자 할때.
        - 형태 
            1. 참일때만
                if( 조건 ) { }
            2. 참/거짓 
                if( 조건 ) { }
                else{ }
            3. 중첩 
                if( 조건 ) { 
                    if( 조건 ){ }
                    else{ }
                }else{
                    if( 조건 ){ }
                    else{ }
                }
            4. 다수조건
                if( 조건1 ){ }
                else if( 조건2 ){ }
                else if( 조건3 ){ }
                else if( 조건4 ){ }
                else{ }
                
                    // 조건 만족에 따라 { } 한번만 실행 
                vs  ------------------
                    // 조건 만족에 따라 { } 여러번 실행 

                if( 조건1 ){ }
                if( 조건2 ){ }
                if( 조건3 ){ }
                if( 조건4 ){ }